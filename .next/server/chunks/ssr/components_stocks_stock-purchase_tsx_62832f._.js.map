{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/stocks/stock-purchase.tsx"],"sourcesContent":["'use client'\n\nimport { useId, useState } from 'react'\nimport { useActions, useAIState, useUIState } from 'ai/rsc'\nimport { formatNumber } from '@/lib/utils'\n\nimport type { AI } from '@/lib/chat/actions'\n\ninterface Purchase {\n  numberOfShares?: number\n  symbol: string\n  price: number\n  status: 'requires_action' | 'completed' | 'expired'\n}\n\nexport function Purchase({\n  props: { numberOfShares, symbol, price, status = 'expired' }\n}: {\n  props: Purchase\n}) {\n  const [value, setValue] = useState(numberOfShares || 100)\n  const [purchasingUI, setPurchasingUI] = useState<null | React.ReactNode>(null)\n  const [aiState, setAIState] = useAIState<typeof AI>()\n  const [, setMessages] = useUIState<typeof AI>()\n  const { confirmPurchase } = useActions()\n\n  // Unique identifier for this UI component.\n  const id = useId()\n\n  // Whenever the slider changes, we need to update the local value state and the history\n  // so LLM also knows what's going on.\n  function onSliderChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = Number(e.target.value)\n    setValue(newValue)\n\n    // Insert a hidden history info to the list.\n    const message = {\n      role: 'system' as const,\n      content: `[User has changed to purchase ${newValue} shares of ${name}. Total cost: $${(\n        newValue * price\n      ).toFixed(2)}]`,\n\n      // Identifier of this UI component, so we don't insert it many times.\n      id\n    }\n\n    // If last history state is already this info, update it. This is to avoid\n    // adding every slider change to the history.\n    if (aiState.messages[aiState.messages.length - 1]?.id === id) {\n      setAIState({\n        ...aiState,\n        messages: [...aiState.messages.slice(0, -1), message]\n      })\n\n      return\n    }\n\n    // If it doesn't exist, append it to history.\n    setAIState({ ...aiState, messages: [...aiState.messages, message] })\n  }\n\n  return (\n    <div className=\"p-4 text-green-400 border rounded-xl bg-zinc-950\">\n      <div className=\"inline-block float-right px-2 py-1 text-xs rounded-full bg-white/10\">\n        +1.23% ↑\n      </div>\n      <div className=\"text-lg text-zinc-300\">{symbol}</div>\n      <div className=\"text-3xl font-bold\">${price}</div>\n      {purchasingUI ? (\n        <div className=\"mt-4 text-zinc-200\">{purchasingUI}</div>\n      ) : status === 'requires_action' ? (\n        <>\n          <div className=\"relative pb-6 mt-6\">\n            <p>Shares to purchase</p>\n            <input\n              id=\"labels-range-input\"\n              type=\"range\"\n              value={value}\n              onChange={onSliderChange}\n              min=\"10\"\n              max=\"1000\"\n              className=\"w-full h-1 rounded-lg appearance-none cursor-pointer bg-zinc-600 accent-green-500 dark:bg-zinc-700\"\n            />\n            <span className=\"absolute text-xs bottom-1 start-0 text-zinc-400\">\n              10\n            </span>\n            <span className=\"absolute text-xs -translate-x-1/2 bottom-1 start-1/3 text-zinc-400 rtl:translate-x-1/2\">\n              100\n            </span>\n            <span className=\"absolute text-xs -translate-x-1/2 bottom-1 start-2/3 text-zinc-400 rtl:translate-x-1/2\">\n              500\n            </span>\n            <span className=\"absolute text-xs bottom-1 end-0 text-zinc-400\">\n              1000\n            </span>\n          </div>\n\n          <div className=\"mt-6\">\n            <p>Total cost</p>\n            <div className=\"flex flex-wrap items-center text-xl font-bold sm:items-end sm:gap-2 sm:text-3xl\">\n              <div className=\"flex flex-col basis-1/3 tabular-nums sm:basis-auto sm:flex-row sm:items-center sm:gap-2\">\n                {value}\n                <span className=\"mb-1 text-sm font-normal text-zinc-600 sm:mb-0 dark:text-zinc-400\">\n                  shares\n                </span>\n              </div>\n              <div className=\"text-center basis-1/3 sm:basis-auto\">×</div>\n              <span className=\"flex flex-col basis-1/3 tabular-nums sm:basis-auto sm:flex-row sm:items-center sm:gap-2\">\n                ${price}\n                <span className=\"mb-1 ml-1 text-sm font-normal text-zinc-600 sm:mb-0 dark:text-zinc-400\">\n                  per share\n                </span>\n              </span>\n              <div className=\"pt-2 mt-2 text-center border-t basis-full border-t-zinc-700 sm:mt-0 sm:basis-auto sm:border-0 sm:pt-0 sm:text-left\">\n                = <span>{formatNumber(value * price)}</span>\n              </div>\n            </div>\n          </div>\n\n          <button\n            className=\"w-full px-4 py-2 mt-6 font-bold bg-green-400 rounded-lg text-zinc-900 hover:bg-green-500\"\n            onClick={async () => {\n              const response = await confirmPurchase(symbol, price, value)\n              setPurchasingUI(response.purchasingUI)\n\n              // Insert a new system message to the UI.\n              setMessages((currentMessages: any) => [\n                ...currentMessages,\n                response.newMessage\n              ])\n            }}\n          >\n            Purchase\n          </button>\n        </>\n      ) : status === 'completed' ? (\n        <p className=\"mb-2 text-white\">\n          You have successfully purchased {value} ${symbol}. Total cost:{' '}\n          {formatNumber(value * price)}\n        </p>\n      ) : status === 'expired' ? (\n        <p className=\"mb-2 text-white\">Your checkout session has expired!</p>\n      ) : null}\n    </div>\n  )\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}