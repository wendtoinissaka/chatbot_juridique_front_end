{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/notification/route.ts"],"sourcesContent":["'use server'\n\nimport axios from 'axios'\nimport { z } from 'zod'\n\n// Interface pour le résultat de l'inscription\ninterface SignupResult {\n  status?: string\n  errorMessage?: string\n}\n\n// Schéma pour valider les données du formulaire\nconst signupSchema = z.object({\n  email: z.string().email().optional(),   // L'email est optionnel mais doit être valide s'il est fourni\n  numero: z.string().min(8).optional(),   // Le numéro est aussi optionnel, mais doit avoir un minimum de 8 caractères\n})\n\n// Fonction pour appeler l'API Flask et inscrire un utilisateur\nexport async function signupNotification(formData: FormData): Promise<SignupResult> {\n  try {\n    const email = formData.get('email')?.toString()\n    const numero = formData.get('numero')?.toString()\n\n    // Valider les données reçues\n    const parsedData = signupSchema.safeParse({ email, numero })\n\n    if (!parsedData.success) {\n      return {\n        errorMessage: \"Les informations saisies sont invalides.\",\n      }\n    }\n\n    // Vérifier que l'un des deux champs est rempli\n    if (!email && !numero) {\n      return {\n        errorMessage: \"Au moins un des champs (email ou numéro) est requis.\",\n      }\n    }\n\n    // URL de l'API\n    const apiUrl = `${process.env.API_BASE_URL}/notification_signup`\n\n    // Appel à l'API (requête POST)\n    const response = await axios.post(apiUrl, {\n      email: parsedData.data.email,\n      numero: parsedData.data.numero,\n    })\n\n    return {\n      status: response.data.status,\n    }\n  } catch (error) {\n    console.error('Erreur lors de l\\'inscription :', error)\n    return {\n      errorMessage: \"Erreur de connexion. Veuillez réessayer.\",\n    }\n  }\n}\n\n\n\n\n\n//  // app/notification/route.ts\n\n// export async function GET() {\n//   try {\n//     const res = await fetch(`${process.env.API_BASE_URL}/notifications`);\n    \n//     if (!res.ok) {\n//       return new Response(JSON.stringify({ message: 'Failed to fetch notifications' }), {\n//         status: res.status,\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//     }\n\n//     const notifications = await res.json();\n\n//     return new Response(JSON.stringify(notifications), {\n//       headers: { 'Content-Type': 'application/json' },\n//     });\n//   } catch (error) {\n//     return new Response(JSON.stringify({ message: 'Internal Server Error' }), {\n//       status: 500,\n//       headers: { 'Content-Type': 'application/json' },\n//     });\n//   }\n// }\n\n// export async function POST(req: Request) {\n//   try {\n//     const data = await req.json();\n//     const { email, numero } = data; // Assurez-vous que ce sont les bons champs\n\n//     // Logique d'inscription (par exemple, appel à votre API)\n//     const res = await fetch(`${process.env.API_BASE_URL}/notification_signup`, {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ email, numero }),\n//     });\n\n//     if (!res.ok) {\n//       return new Response(JSON.stringify({ message: 'Failed to sign up for notifications' }), {\n//         status: res.status,\n//         headers: { 'Content-Type': 'application/json' },\n//       });\n//     }\n\n//     return new Response(JSON.stringify({ message: 'Inscription réussie' }), {\n//       status: 200,\n//       headers: { 'Content-Type': 'application/json' },\n//     });\n//   } catch (error) {\n//     return new Response(JSON.stringify({ message: 'Internal Server Error' }), {\n//       status: 500,\n//       headers: { 'Content-Type': 'application/json' },\n//     });\n//   }\n// }\n\n\n// export async function GET() {\n//   try {\n//     const res = await fetch(`${process.env.API_BASE_URL}/notifications`)\n    \n//     // Vérifie si la réponse est correcte\n//     if (!res.ok) {\n//       return new Response(JSON.stringify({ message: 'Failed to fetch notifications' }), {\n//         status: res.status,\n//         headers: { 'Content-Type': 'application/json' },\n//       })\n//     }\n\n//     const notifications = await res.json()\n\n//     return new Response(JSON.stringify(notifications), {\n//       headers: { 'Content-Type': 'application/json' },\n//     })\n//   } catch (error) {\n//     // En cas d'erreur, renvoie une réponse avec un statut 500\n//     return new Response(JSON.stringify({ message: 'Internal Server Error' }), {\n//       status: 500,\n//       headers: { 'Content-Type': 'application/json' },\n//     })\n//   }\n// }\n\n\n\n\n\n// export async function GET() {\n//     const res = await fetch(`${process.env.API_BASE_URL}/notifications`) //('http://localhost:5000/notifications') // Met l'URL correcte de ton backend Flask\n//     const notifications = await res.json()\n  \n//     return new Response(JSON.stringify(notifications), {\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//     })\n//   }\n  "],"names":[],"mappings":";;;;;;;CA+DA,gCAAgC;CAEhC,gCAAgC;CAChC,UAAU;CACV,4EAA4E;CAE5E,qBAAqB;CACrB,4FAA4F;CAC5F,8BAA8B;CAC9B,2DAA2D;CAC3D,YAAY;CACZ,QAAQ;CAER,8CAA8C;CAE9C,2DAA2D;CAC3D,yDAAyD;CACzD,UAAU;CACV,sBAAsB;CACtB,kFAAkF;CAClF,qBAAqB;CACrB,yDAAyD;CACzD,UAAU;CACV,MAAM;CACN,IAAI;CAEJ,6CAA6C;CAC7C,UAAU;CACV,qCAAqC;CACrC,kFAAkF;CAElF,gEAAgE;CAChE,mFAAmF;CACnF,wBAAwB;CACxB,yDAAyD;CACzD,iDAAiD;CACjD,UAAU;CAEV,qBAAqB;CACrB,kGAAkG;CAClG,8BAA8B;CAC9B,2DAA2D;CAC3D,YAAY;CACZ,QAAQ;CAER,gFAAgF;CAChF,qBAAqB;CACrB,yDAAyD;CACzD,UAAU;CACV,sBAAsB;CACtB,kFAAkF;CAClF,qBAAqB;CACrB,yDAAyD;CACzD,UAAU;CACV,MAAM;CACN,IAAI;CAGJ,gCAAgC;CAChC,UAAU;CACV,2EAA2E;CAE3E,4CAA4C;CAC5C,qBAAqB;CACrB,4FAA4F;CAC5F,8BAA8B;CAC9B,2DAA2D;CAC3D,WAAW;CACX,QAAQ;CAER,6CAA6C;CAE7C,2DAA2D;CAC3D,yDAAyD;CACzD,SAAS;CACT,sBAAsB;CACtB,iEAAiE;CACjE,kFAAkF;CAClF,qBAAqB;CACrB,yDAAyD;CACzD,SAAS;CACT,MAAM;CACN,IAAI;CAMJ,gCAAgC;CAChC,gKAAgK;CAChK,6CAA6C;CAE7C,2DAA2D;CAC3D,mBAAmB;CACnB,8CAA8C;CAC9C,WAAW;CACX,SAAS;CACT,MAAM"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/notification/signup/page.tsx"],"sourcesContent":["\"use client\";\nimport { useState, useEffect } from 'react';\nimport { signupNotification } from '../route';\n\nconst NotificationSignup = () => {\n  const [email, setEmail] = useState('');\n  const [numero, setNumero] = useState('');\n  const [message, setMessage] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  // Vérifier les préférences de thème de l'utilisateur\n  useEffect(() => {\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setIsDarkTheme(prefersDark);\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('numero', numero);\n\n    const result = await signupNotification(formData);\n\n    if (result.status) {\n      setMessage('Inscription réussie !');\n    } else {\n      setMessage(result.errorMessage || 'Erreur lors de l\\'inscription.');\n    }\n  };\n\n  return (\n    <div style={{\n      maxWidth: '400px',\n      margin: '0 auto',\n      padding: '20px',\n      borderRadius: '5px',\n      boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',\n      backgroundColor: isDarkTheme ? '#121212' : '#f1f1f1',\n      color: isDarkTheme ? '#ffffff' : '#333333'\n    }}>\n      <h2 style={{ textAlign: 'center' }}>Inscription aux notifications</h2>\n      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column' }}>\n        <div style={{ marginBottom: '15px' }}>\n          <label style={{ fontSize: '14px' }}>\n            Email :\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              style={{\n                width: '100%',\n                padding: '10px',\n                fontSize: '16px',\n                borderRadius: '5px',\n                border: '1px solid #ccc',\n                marginTop: '5px',\n                backgroundColor: isDarkTheme ? '#424242' : '#ffffff',\n                color: isDarkTheme ? '#ffffff' : '#000000',\n              }}\n              placeholder=\"Entrer votre email\"\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '15px' }}>\n          <label style={{ fontSize: '14px' }}>\n            Numéro:\n            <input\n              type=\"tel\" // Utiliser le type 'tel' pour le numéro de téléphone\n              value={numero}\n              onChange={(e) => setNumero(e.target.value)}\n              style={{\n                width: '100%',\n                padding: '10px',\n                fontSize: '16px',\n                borderRadius: '5px',\n                border: '1px solid #ccc',\n                marginTop: '5px',\n                backgroundColor: isDarkTheme ? '#424242' : '#ffffff',\n                color: isDarkTheme ? '#ffffff' : '#000000',\n              }}\n              placeholder=\"Entrer votre numéro\"\n              required\n            />\n          </label>\n        </div>\n        <button type=\"submit\" style={{\n          padding: '10px',\n          fontSize: '16px',\n          backgroundColor: '#007BFF',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer',\n          transition: 'background-color 0.3s ease',\n        }}>S'inscrire</button>\n      </form>\n      {message && <p style={{ marginTop: '15px', fontSize: '14px' }}>{message}</p>}\n    </div>\n  );\n};\n\nexport default NotificationSignup;\n\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;AAIA,MAAM,qBAAqB;;IACzB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;IAE/C,qDAAqD;IACrD,CAAA,GAAA,oUAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,cAAc,OAAO,UAAU,CAAC,gCAAgC,OAAO;QAC7E,eAAe;IACjB,GAAG,EAAE;IAEL,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAEhB,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC,SAAS;QACzB,SAAS,MAAM,CAAC,UAAU;QAE1B,MAAM,SAAS,MAAM,CAAA,GAAA,+HAAA,CAAA,qBAAkB,AAAD,EAAE;QAExC,IAAI,OAAO,MAAM,EAAE;YACjB,WAAW;QACb,OAAO;YACL,WAAW,OAAO,YAAY,IAAI;QACpC;IACF;IAEA,qBACE,oWAAC;QAAI,OAAO;YACV,UAAU;YACV,QAAQ;YACR,SAAS;YACT,cAAc;YACd,WAAW;YACX,iBAAiB,cAAc,YAAY;YAC3C,OAAO,cAAc,YAAY;QACnC;;0BACE,oWAAC;gBAAG,OAAO;oBAAE,WAAW;gBAAS;0BAAG;;;;;;0BACpC,oWAAC;gBAAK,UAAU;gBAAc,OAAO;oBAAE,SAAS;oBAAQ,eAAe;gBAAS;;kCAC9E,oWAAC;wBAAI,OAAO;4BAAE,cAAc;wBAAO;kCACjC,cAAA,oWAAC;4BAAM,OAAO;gCAAE,UAAU;4BAAO;;gCAAG;8CAElC,oWAAC;oCACC,MAAK;oCACL,OAAO;oCACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;oCACxC,OAAO;wCACL,OAAO;wCACP,SAAS;wCACT,UAAU;wCACV,cAAc;wCACd,QAAQ;wCACR,WAAW;wCACX,iBAAiB,cAAc,YAAY;wCAC3C,OAAO,cAAc,YAAY;oCACnC;oCACA,aAAY;;;;;;;;;;;;;;;;;kCAIlB,oWAAC;wBAAI,OAAO;4BAAE,cAAc;wBAAO;kCACjC,cAAA,oWAAC;4BAAM,OAAO;gCAAE,UAAU;4BAAO;;gCAAG;8CAElC,oWAAC;oCACC,MAAK,MAAM,qDAAqD;;oCAChE,OAAO;oCACP,UAAU,CAAC,IAAM,UAAU,EAAE,MAAM,CAAC,KAAK;oCACzC,OAAO;wCACL,OAAO;wCACP,SAAS;wCACT,UAAU;wCACV,cAAc;wCACd,QAAQ;wCACR,WAAW;wCACX,iBAAiB,cAAc,YAAY;wCAC3C,OAAO,cAAc,YAAY;oCACnC;oCACA,aAAY;oCACZ,QAAQ;;;;;;;;;;;;;;;;;kCAId,oWAAC;wBAAO,MAAK;wBAAS,OAAO;4BAC3B,SAAS;4BACT,UAAU;4BACV,iBAAiB;4BACjB,OAAO;4BACP,QAAQ;4BACR,cAAc;4BACd,QAAQ;4BACR,YAAY;wBACd;kCAAG;;;;;;;;;;;;YAEJ,yBAAW,oWAAC;gBAAE,OAAO;oBAAE,WAAW;oBAAQ,UAAU;gBAAO;0BAAI;;;;;;;;;;;;AAGtE;GAjGM;KAAA;uCAmGS"}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}